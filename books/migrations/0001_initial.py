# Generated by Django 4.0.4 on 2022-06-26 12:05

import books.models
import core.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalPage',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('page_no', models.IntegerField(help_text='The number of the page.', verbose_name='page number')),
                ('volume_no', models.PositiveIntegerField(help_text='The number of the volume in the series.', validators=[django.core.validators.MinValueValidator(1, 'The volume number must be greater or equal to 1.'), django.core.validators.MaxValueValidator(21, 'The volume number must be less or equal to 21.')], verbose_name='volume number')),
                ('type', models.CharField(blank=True, choices=[('Typed', 'Typed'), ('Scanned', 'Scanned')], max_length=7)),
                ('version_no', models.PositiveIntegerField(default=0, help_text='The version of the uploaded document.', verbose_name='version number')),
                ('scanned_text', models.TextField(blank=True, help_text='Scanned version of the page.', max_length=100, validators=[core.validators.FileValidator(content_types=('application/pdf', 'image/png'), max_size=10240000)])),
                ('typed_text', models.TextField(blank=True, help_text='Typed version of the page.', max_length=100, validators=[core.validators.FileValidator(content_types=('application/pdf', 'text/plain'), max_size=1024000)])),
                ('comments', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical page',
                'verbose_name_plural': 'historical pages',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_no', models.IntegerField(help_text='The number of the page.', verbose_name='page number')),
                ('volume_no', models.PositiveIntegerField(help_text='The number of the volume in the series.', validators=[django.core.validators.MinValueValidator(1, 'The volume number must be greater or equal to 1.'), django.core.validators.MaxValueValidator(21, 'The volume number must be less or equal to 21.')], verbose_name='volume number')),
                ('type', models.CharField(blank=True, choices=[('Typed', 'Typed'), ('Scanned', 'Scanned')], max_length=7)),
                ('version_no', models.PositiveIntegerField(default=0, help_text='The version of the uploaded document.', verbose_name='version number')),
                ('scanned_text', models.FileField(blank=True, help_text='Scanned version of the page.', upload_to=books.models.media_directory_path, validators=[core.validators.FileValidator(content_types=('application/pdf', 'image/png'), max_size=10240000)])),
                ('typed_text', models.FileField(blank=True, help_text='Typed version of the page.', upload_to=books.models.media_directory_path, validators=[core.validators.FileValidator(content_types=('application/pdf', 'text/plain'), max_size=1024000)])),
                ('comments', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['volume_no', 'page_no'],
            },
        ),
        migrations.AddConstraint(
            model_name='page',
            constraint=models.UniqueConstraint(fields=('volume_no', 'page_no', 'type'), name='books_page_volume_page_type_version_unique'),
        ),
        migrations.AddConstraint(
            model_name='page',
            constraint=models.CheckConstraint(check=models.Q(('scanned_text', ''), ('typed_text', ''), _connector='OR'), name='books_page_scanned_or_typed_text_null'),
        ),
        migrations.AddConstraint(
            model_name='page',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('scanned_text', ''), _negated=True), models.Q(('typed_text', ''), _negated=True), _connector='OR'), name='books_page_scanned_or_typed_text_set'),
        ),
        migrations.AddField(
            model_name='historicalpage',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
    ]
